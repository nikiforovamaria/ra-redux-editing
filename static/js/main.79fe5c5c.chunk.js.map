{"version":3,"sources":["actions/actionTypes.js","actions/actionCreators.js","components/ServiceAdd.js","components/ServiceList.js","App.js","serviceWorker.js","reducers/serviceList.js","reducers/serviceAdd.js","store/index.js","index.js"],"names":["ADD_SERVICE","REMOVE_SERVICE","EDIT_SERVICE","CLEAR_SERVICE","CHANGE_SERVICE_FIELD","clearService","type","ServiceAdd","item","useSelector","state","serviceAdd","dispatch","useDispatch","handleChange","evt","target","name","value","payload","changeServiceField","onSubmit","price","preventDefault","onChange","onClick","ServiceList","items","serviceList","formState","handleRemove","id","find","el","removeService","handleEdit","n","EditService","map","o","App","Boolean","window","location","hostname","match","initialState","nanoid","reducer","combineReducers","action","i","Number","filter","service","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79fe5c5c.chunk.js","sourcesContent":["export const ADD_SERVICE = 'ADD_SERVICE';\r\nexport const REMOVE_SERVICE = 'REMOVE_SERVICE';\r\nexport const EDIT_SERVICE = 'EDIT_SERVICE';\r\nexport const CLEAR_SERVICE = 'CLEAR_SERVICE';\r\nexport const CHANGE_SERVICE_FIELD = 'CHANGE_SERVICE_FIELD';\r\n","import { ADD_SERVICE, REMOVE_SERVICE, CHANGE_SERVICE_FIELD, EDIT_SERVICE, CLEAR_SERVICE } from './actionTypes';\r\n\r\nexport function addService(name, price) {\r\n  return {type: ADD_SERVICE, payload: {name, price}};\r\n}\r\n\r\nexport function removeService(id) {\r\n  return {type: REMOVE_SERVICE, payload: {id}};\r\n}\r\n\r\nexport function EditService(n, price) {\r\n  return {type: EDIT_SERVICE, payload: {n, price}};\r\n}\r\n\r\nexport function clearService() {\r\n  return {type: CLEAR_SERVICE};\r\n}\r\n\r\nexport function changeServiceField(name, value) {\r\n  return {type: CHANGE_SERVICE_FIELD, payload: {name, value}}\r\n}\r\n","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {changeServiceField, addService, clearService} from '../actions/actionCreators';\r\n\r\nfunction ServiceAdd() {\r\n\tconst item = useSelector(state => state.serviceAdd);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst handleChange = evt => {\r\n\t\tconst {name, value} = evt.target;\r\n\t\tdispatch(changeServiceField(name, value));\r\n\t}\r\n\r\n\tconst handleSubmit = evt => {\r\n\t\t\tevt.preventDefault();\r\n\t\t\tdispatch(addService(item.name, item.price));\r\n\t}\r\n\r\n\tconst handleClear = (evt) => {\r\n\t\tevt.preventDefault();\r\n\t\tdispatch(clearService())\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<input name='name' onChange={handleChange} value={item.name} />\r\n\t\t\t<input name='price' onChange={handleChange} value={item.price} />\r\n\t\t\t<button type='submit'>Save</button>\r\n\t\t\t<button onClick={handleClear}>Cancel</button>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default ServiceAdd;\r\n","import React from 'react'\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {removeService, EditService, clearService} from '../actions/actionCreators';\r\n\r\nfunction ServiceList() {\r\n  const items = useSelector(state => state.serviceList);\r\n  const formState = useSelector(state => state.serviceAdd);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleRemove = id => {\r\n    // очищаем форму ввода если удаляем редактируемый элемент\r\n    if(formState.name===items.find((el)=>el.id===id).name)\r\n    {\r\n      dispatch(clearService());\r\n    }\r\n    dispatch(removeService(id));\r\n  }\r\n\r\n  const handleEdit = (name,price) => {\r\n    dispatch(EditService(name,price));\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {items.map(o => (\r\n        <li key={o.id}>\r\n          {o.name} {o.price}\r\n          <button onClick={() => handleRemove(o.id)}>✕</button>\r\n          <button onClick={() => handleEdit(o.name, o.price)}>✎</button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default ServiceList\r\n","import React from 'react';\nimport ServiceAdd from './components/ServiceAdd';\nimport ServiceList from './components/ServiceList';\n\n\nfunction App() {\n  return (\n    <>\n      <ServiceAdd />\n      <ServiceList />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import {nanoid} from 'nanoid';\r\nimport {ADD_SERVICE, REMOVE_SERVICE} from '../actions/actionTypes';\r\n\r\nconst initialState = [\r\n  {id: nanoid(), name: 'Замена стекла', price: 21000},\r\n  {id: nanoid(), name: 'Замена дисплея', price: 25000},\r\n];\r\n\r\nexport default function serviceListReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_SERVICE:\r\n      const {name, price} = action.payload;\r\n      if(state.find((el) => el.name===name))\r\n      {\r\n        return state.map((el,i) => {\r\n          if(el.name===name)\r\n          {\r\n            state[i].price=price;\r\n          }\r\n          return el;\r\n        })\r\n      }\r\n      else\r\n      {\r\n        return [...state, {id: nanoid(), name, price: Number(price)}];\r\n      }\r\n    case REMOVE_SERVICE:\r\n      const {id} = action.payload;\r\n      return state.filter(service => service.id !== id);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {CHANGE_SERVICE_FIELD, CLEAR_SERVICE, EDIT_SERVICE} from '../actions/actionTypes'\r\n\r\nconst initialState = {\r\n  name: '',\r\n  price: '',\r\n};\r\n\r\nexport default function serviceAddReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case CHANGE_SERVICE_FIELD:\r\n      const {name, value} = action.payload;\r\n      return {...state, [name]: value};\r\n    case EDIT_SERVICE:\r\n      const {n, price} = action.payload;\r\n      return {name: n, price: price};\r\n    case CLEAR_SERVICE:\r\n      return {name: '', price: ''};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport serviceListReducer from '../reducers/serviceList';\r\nimport serviceAddReducer from '../reducers/serviceAdd';\r\n\r\nconst reducer = combineReducers({\r\n  serviceList: serviceListReducer,\r\n  serviceAdd: serviceAddReducer,\r\n});\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}